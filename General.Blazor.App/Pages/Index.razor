@page "/"

@using Blazorise
@using DevExpress.Blazor
@using CurrieTechnologies.Razor.SweetAlert2
@using General.Blazor.App.Models

@inject NavigationManager NM
@inject SweetAlertService Swal

<style>
  .loading-div{
    z-index: 10500 !important;
    left: calc((100vw - @width) / 2);
    top: calc((100vh - @height) / 2); 
    position: absolute;   
    background: rgba(1,1,1,0.5);;
  }
  
</style>

<DxButton Click="@(() => NM.NavigateTo("/test1"))">Test 1</DxButton>
<DxButton Click="@(() => NM.NavigateTo("/test2"))">Test 2</DxButton>
<DxButton Click="@(async () => { showpopup = true; })">Sweet Alert</DxButton>

@if (showloading)
{
  <div class="loading-div" style="height:@height; width: @width;display: inline-flex">
    <div class="loading" style="width: 100%; height: 100%">
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
    </div>
    <span class="loading-text">Loading...</span>
  </div>
}

<DxPopup @bind-Visible="showpopup" Height="@height" Width="@width" CloseOnOutsideClick="false">
    <ChildContent>
      <DxLoadingPanel Visible="false">
        <h1>MERHABA POPUP</h1>
        <DxCheckBox Checked="extendPopup" CheckedChanged="@((bool b) => { extendPopup = b; height = extendPopup ? "650px" : "400px"; })"></DxCheckBox>
        <DxButton Click="@(() => { showloading = true; })"></DxButton>
      </DxLoadingPanel>
    </ChildContent>
  </DxPopup>

@code
{
  private bool showloading;
  private bool showpopup;
  private bool extendPopup = false;

  private string width = "400px";
  private string height = "400px";

  DxGrid dxGrid;

  public IList<Person> Persons = new List<Person>()
  {
          new Person()
          {
                  Name = "Musa",
                  Age = 25.5m
          }
  };

  public async Task swalRes()
  {
    var res = await Swal.FireAsync("Oooopppsss.", "There is a missing things.", "warning");
    var str = res.Value;
  }
}