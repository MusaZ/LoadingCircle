@using DevExpress.Blazor

@inject IJSRuntime JS

@if (LoadingShow  && !loadshowing)
{
  var getData = JS.InvokeAsync<string[]>("getSizeDevXPopup", "dxbl-grid").GetAwaiter();
  getData.OnCompleted(() =>
  {
    var sizes = getData.GetResult();
    if (sizes is not null)
    {
      width = sizes[0] + "px";
      height = sizes[1] + "px";
      left = sizes[2] + "px";
      top = sizes[3] + "px";
      loadshowing = true;
      StateHasChanged();
    }
  });
}
@if (loadshowing)
{
  <text>
    <div class="loading-div" 
         style="height:@height; width: @width;display: inline-flex;border-radius: 5px;left: @left; top: @top">
      <div class="loading" style="width: 100%; height: 100%;border-radius: inherit">
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
      </div>
      <span class="loading-text">@LoadingText</span>
    </div>
    <script suppress-error="BL9992">
        function checkKeystroke(e) {
                e.preventDefault();
        }
      </script>
  </text>
}

<div>
  <DxGrid Data="Data"
          Columns="Columns"
          onkeydown="checkKeystroke(event)">
  </DxGrid>
</div>

@code {
  [Parameter] public bool LoadingShow { get; set; }
  [Parameter] public string LoadingText { get; set; }
  [Parameter] public object Data { get; set; }
  [Parameter] public RenderFragment Columns { get; set; }

  private string width;
  private string height;
  private string left;
  private string top;
  
  private bool loadshowing;
}