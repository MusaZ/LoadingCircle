@using Blazorise
@using DevExpress.Blazor
@using CurrieTechnologies.Razor.SweetAlert2
@using DevExpress.Blazor.Internal.Grid
@using General.Blazor.App.Models
@using Size = General.Blazor.App.Models.Size

@inject IJSRuntime JS

<style>
  .loading-div{
    z-index: 10500 !important;
    left: calc((100vw - @width) / 2);
    top: calc((100vh - @height) / 2); 
    position: absolute;   
    background: rgba(1,1,1,0.5);
    display: none;
  }  
</style>

@if (showloading && !loadshowing)
{
  var getData = JS.InvokeAsync<string[]>("getSizeDevXPopup").GetAwaiter();
  getData.OnCompleted(() =>
  {
    var sizes = getData.GetResult();
    if (sizes is not null)
    {
      width = sizes[0] + "px";
      height = sizes[1] + "px";
      loadshowing = true;
      StateHasChanged();
    }
  });
}

@if (loadshowing)
{
  <text>
    <div class="loading-div" style="height:@height; width: @width;display: inline-flex;border-radius: 5px;">
      <div class="loading" style="width: 100%; height: 100%;border-radius: inherit">
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
      </div>
      <span class="loading-text">Loading...</span>
    </div>
    <script suppress-error="BL9992">
        function checkKeystroke(e) {
                //if (e.keyCode === 9 || e.keyCode === 27) //
                e.preventDefault();            
                console.log(e.keyCode);
        }
      </script>  
  </text>
}


<DxPopup @ref=dxPopup 
         Visible="Visible" 
         VisibleChanged="VisibleChanged" 
         CloseOnOutsideClick="false"
         CloseOnEscape="false"
         onkeydown="checkKeystroke(event)"
         
         >
  <ChildContent>
    <h1>MERHABA POPUP</h1>
    <DxCheckBox Checked="extendPopup"
                CheckedChanged="@((bool b) => { extendPopup = b; height = extendPopup ? "650px" : "400px"; })">

    </DxCheckBox>
    <DxButton Click="@(() => { showloading = true; })">Loading</DxButton>
    <div style="height: 650px;"></div>
  </ChildContent>
</DxPopup>

@code
{
  private DxPopup dxPopup;
  private bool showloading;
  private bool loadshowing;
  private bool _visible;

  [Parameter] public bool Visible { get; set; }

  [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
  private bool extendPopup = false;

  private string width;
  private string height;

  DxGrid dxGrid;

  public IList<Person> Persons = new List<Person>()
  {
          new Person()
          {
                  Name = "Musa",
                  Age = 25.5m
          }
  };
  

  
  protected override void OnAfterRender(bool firstRender)
  {
    // var sizes = JS.InvokeAsync<string[]>("startTimer").GetAwaiter();
    // sizes.OnCompleted(() =>
    // {
    //   var data = sizes.GetResult();
    //   if (data is not null)
    //   {
    //     width = $"{data[0]}px";
    //     height = $"{data[1]}px";  
    //   }
    // });
  }
}