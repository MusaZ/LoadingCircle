@using Blazorise
@using DevExpress.Blazor
@using CurrieTechnologies.Razor.SweetAlert2
@using DevExpress.Blazor.Internal.Grid
@using General.Blazor.App.Models
@using Size = General.Blazor.App.Models.Size

@inject IJSRuntime JS

<style>
  .loading-div{
    z-index: 10500 !important;
    left: calc((100% - @width) / 2);     
    top: calc((100% - @height) / 2);     
    position: absolute;
    background: rgba(1,1,1,0.5);
    display: none;
  }  
</style>

@if (showloading && !loadshowing)
{
  var getData = JS.InvokeAsync<string[]>("getSizeDevXPopup", "dxbl-popup dxbl-popup-adaptivity").GetAwaiter();
  getData.OnCompleted(() =>
  {
    var sizes = getData.GetResult();
    if (sizes is not null)
    {
      width = sizes[0] + "px";
      height = sizes[1] + "px";
      left = sizes[2] + "px";
      top = sizes[3] + "px";
      loadshowing = true;
      StateHasChanged();
    }
  });
}

@if (loadshowing)
{
  <text>
    <div class="loading-div"
         style="height:@height; width: @width;display: inline-flex;border-radius: 5px;">
      <Loading></Loading>
      <span class="loading-text">@LoadingText</span>
    </div>
    <script suppress-error="BL9992">
        function checkKeystroke(e) {
                e.preventDefault();
        }
      </script>
  </text>
}

<DxPopup @ref=dxPopup
         Visible="Visible"
         VisibleChanged="VisibleChanged"
         CloseOnOutsideClick="false"
         CloseOnEscape="false"
         onkeydown="checkKeystroke(event)">
  <ChildContent>
    <h1>MERHABA POPUP</h1>
    <DxCheckBox Checked="extendPopup"
                CheckedChanged="@((bool b) => { extendPopup = b; height = extendPopup ? "650px" : "400px"; })">

    </DxCheckBox>
    <DxButton Click="@(() => { showloading = true; })">Loading</DxButton>
    <div style="height: 650px;"></div>
  </ChildContent>
</DxPopup>

@code
{
  private DxPopup dxPopup;

  private bool showloading;
  private bool loadshowing;
  private bool _visible;
  private bool extendPopup = false;

  private string width;
  private string height;
  private string left;
  private string top;

  [Parameter] public bool Visible { get; set; }

  [Parameter] public string LoadingText { get; set; } = "Loading";

  [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
}