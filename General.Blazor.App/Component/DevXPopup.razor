@using Blazorise
@using DevExpress.Blazor
@using CurrieTechnologies.Razor.SweetAlert2
@using General.Blazor.App.Models
@using Size = General.Blazor.App.Models.Size

@inject IJSRuntime JS

<style>
  .loading-div{
    z-index: 10500 !important;
    left: calc((100vw - @width) / 2);
    top: calc((100vh - @height) / 2); 
    position: absolute;   
    background: rgba(1,1,1,0.5);;
  }
  
</style>

@if (showloading)
{
  <div class="loading-div" style="height:@dxPopup?.Height; width: @dxPopup?.Width;display: inline-flex;border-radius: 5px;">
    <div class="loading" style="width: 100%; height: 100%;border-radius: inherit">
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
    </div>
    <span class="loading-text">Loading...</span>
  </div>
}

<DxPopup @ref=dxPopup Visible="Visible" VisibleChanged="VisibleChanged" CloseOnOutsideClick="false">
  <ChildContent>
    <h1>MERHABA POPUP</h1>
    <DxCheckBox Checked="extendPopup"
                CheckedChanged="@((bool b) => { extendPopup = b; height = extendPopup ? "650px" : "400px"; })">

    </DxCheckBox>
    <DxButton Click="@(() => { showloading = true; })">Loading</DxButton>
    <div style="height: 650px;"></div>
  </ChildContent>
</DxPopup>


@code
{
  private DxPopup dxPopup;
  private bool showloading;
  private bool _visible;

  [Parameter] public bool Visible { get; set; }

  [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
  private bool extendPopup = false;

  private string width = "400px";
  private string height = "400px";

  DxGrid dxGrid;

  public IList<Person> Persons = new List<Person>()
  {
    new Person()
    {
      Name = "Musa",
      Age = 25.5m
    }
  };

  protected override void OnAfterRender(bool firstRender)
  {
    var sizes = JS.InvokeAsync<Size>("getSizeDevXPopup").GetAwaiter().GetResult();
    width = $"{sizes.Width}px";
    height = $"{sizes.Height}px";
  }
}